            <h1>Node Architecture</h1><br>
            <p>Sensor nodes are tiny devices that have to support a variety of operations. Therefore they need to be designed with care to optimise both their size and performances. A conventional sensor node comprises the following devices:</p>
                <div class="row-fluid">
                    <div class="span6">

                        <div class="row-fluid">
                        <div class="span12">
                            <h2>Microcontroller</h2>
                            <p>The controller performs tasks, processes the collected data, and, importantly, controls the performance and the functionality of all the other components of the sensor node. Especially, it comprises the internal memory of the sensor node, as well as a processor.
                            Due to the wireless nature of the system, the processor must be adapted to embedded applications and consume very little energy.
                            Amongst various processors the Atmel ATMega is often used on sensor nodes: by balancing power-consumption and processing-speed, it presents all the qualities required.
                            <b>// TO DEVELOP</b>
                            </p>
                        </div> <!--span12-->
                        </div> <!--row-->

                        <br>

                        <div class="row-fluid">
                        <div class="span12">
                            <h2>Power Source</h2>
                            <p>The power source must provide has much energy as possible for the sensor node to be efficient. However this is a challenge: supplying energy to the node has to be done at the smallest volume, the lightest weight, and the longest lifetime.
                            </p>
                            <p>
                            Sensor nodes energy supply is made through batteries; on top of the above requirements, batteries have to ensure a voltage stability to avoid DC-to-DC conversion. Indeed, this conversion, consisting of switching from a direct current at a given voltage to another direct current at a different voltage, can damage the other components of the sensor node – those that could not work at the new voltage. Two types of battery are available:  non-rechargeable and rechargeable.
                            </p>
                            <p>
                            In Wireless Sensor Networks, the rechargeable battery can obviously not be charged by a wired source, and therefore implies that the sensor node use energy scavenging. Scavenging is the process of producing energy through using environmental resources:
                            <ul>
                                <li>
                                    <p>
                                    The light of the sun can be converted to electricity power by photovoltaic cells and therefore supply a power from 10μW to 15mW per cm<sup>2</sup> of solar cell.
                                    </p>
                                </li>
                                <li>
                                    <p>
                                    The air temperature differences can produce current - about 1V for difference of 5K.
                                    </p>
                                </li>
                                <li>
                                    <p>
                                    Other physical measures such as vibrations, pressure variations (using piezoelectricity) and liquid flows can also generate power, from 10<sup>-1</sup> to 10<sup>4</sup> μW/cm<sup>2</sup> depending on the technique.
                                    </p>
                                </li>
                            </ul>
                            </p>
                        </div> <!--span12-->
                        </div> <!--row-->
                    </div> <!--span6-->

                    <div class="span6">
                        <div class="row-fluid">
                            <div class="span12">
                                <h2>Transceiver</h2>
                                    <p>The transceiver is the communication interface between the sensor node and the rest of the network: it is able to receive bit streams as well as converting data into streams. Wireless Sensor Networks often use radio band, and in this case, the transceiver has a reception frequency-range; it is able to get data transmitted through a specific and limited radio band – also called radio spectrum.
                                    Every transceiver presents different operational states:
                                    <ul>
                                        <li>
                                            <p><b>Transmit state</b> where the transceiver sends data converted into bit streams to the network, in a definite radio band.</p>
                                        </li>
                                        <li>
                                            <p><b>Receive state</b> where the gadget expects to receive data and receives it.</p>
                                        </li>
                                        <li>
                                            <p><b>Idle state</b> where the transceiver is ready to receive data, but does not do so: it means it is inactive. This state is set up by switching off some hardware functions – in the aim of saving energy. However, when being in this state, the transceiver consumes as much as energy than when being in the receive state, therefore it is better to switch it off entirely (sleep state).
                                            </p>
                                        </li>
                                        <li>
                                            <p><b>Sleep state</b> where the device is not able to receive something immediately due to significant parts of its hardware being switched off. This state prevents from useless power-consumption.</p>
                                        </li>
                                    </ul>
                                    </p>
                                </div> <!--span12-->
                            </div> <!--row-->

                        <br>

                        <div class="row-fluid">
                            <div class="span12">
                                <h2>Memory</h2>
                                    <p>The memory of a sensor node generally consists of two shapes of memory: one internal, the other external.</p>
                                    <ul>
                                        <li><b>Internal memory: </b>
                                            <p>
                                            It is a Random Access Memory (RAM), therefore it is volatile: when not powered, its content is erased.
                                            </p>
                                        </li>
                                        <li><b>External memory: </b>
                                            <p>In most of the cases, the external memory is Flash Memory, coupled with EEPROM (Electrically Erasable Programmable Read-Only Memory – programmed and erased using field electron emission). Those two external memories are non-volatile, i.e. they retain the stored information even when not powered.
                                            </p>
                                            <p>
                                            The difference relies on the erasing process of their content: in both case, the data is stored using quantum cells to trap electrons. When the bit stored is one, an electron is present in the quantum cell. When the bit stored corresponds to 0, no electron is trapped.
                                            When erasing EEPROM content, the only erased cells are the one containing electrons (bit = 1) that must have the logic value 0.  In the case of Flash Memory, every cell is erased, whether it contains an electron or not.
                                            This explains that Flash Memory is much faster than EEPROM and therefore the biggest proportion of the external memory will be Flash Memory (typically about 128 kB against 4 kB for EEPROM)
                                            </p>
                                        </li>
                            </div>
                        </div> <!--row-->
                    </div> <!-- span6-->
                </div> <!-- row-->

                <div class="row-fluid">
                    <div class="span12">
                        <h2>Sensors</h2>
                            <p>A node features one or several sensors. Each sensor monitors environment variables and their variations, and has specific characteristic that may vary from one sensor to another, within the same network.
                            </p>
                            <ul>
                                <li><b>Area of coverage:</b>
                                    <p> The area of coverage determines the area in which the sensor can sense and feel its environment and its modifications. The sensor won’t detect events happening outside of the area of coverage and therefore no data about those events will be collected.</p>
                                    <br></br>
                                    <img style="width: 70%;" src="images/wsn/detection.png"> 

                                     <br></br>

                                    <div class="row-fluid">
                                        <div class="span4">
                                            <p>
                                            <br></br><br></br>
                                            Depending on the network architecture and the way the sensor nodes are spatially organised, the coverage area of several sensors can overlap events one or several times, as illustrated by the figure. Overlapping coverage areas causes spatial redundancy: i.e. it is possible to obtain information for a specific location from different sources<sup>[1]</sup>
                                            </p>
                                        </div>
                                         <div class="span8 pagination-centered">
                                            <img src="images/wsn/uniform_cover.png" style="width:90%;" name="image" onmouseover="image.src='images/wsn/uniform_cover_numbers.png'" onmouseout="image.src='images/wsn/uniform_cover.png'"/>
                                        </div>
                                    </div> <!--row-->

                                    <br></br>

                                     <div class="row-fluid">
                                        <div class="span8 pagination-centered">
                                            <img style="width: 80%;" src="images/wsn/not_uniform_cover.png"> 
                                        </div>
                                        <div class="span4">
                                            <p>
                                            <br></br>
                                            Moreover, contrary to the general idea we have of coverage area, it is important to stress that this region is not always uniform, in the sense that is does not always cover a circular region around the sensor node.
                                            </p>
                                        </div>
                                    </div> <!--row-->

                                    <p>
                                    </p>
                                </li>
                            </ul>
                    </div>
                </div> <!-- row-->

                <br></br>

                <div class="row-fluid">
                    <div class="span12 pagination-centered">
                        <h2> Node Architecture Diagram</h2>
                        <br> 
                        <img src="images/wsn/node_architecture.png" width="80%">
                    </div>
                </div> <!-- row-->

               <br></br>

               <h2 class="pagination-centered">Examples of Sensor Nodes</h2>
                <br>
                <p>
                <ul class="thumbnails">
                    <li class="span4">
                        <div class="thumbnail">
                            <img src="images/wsn/mica2mote.png">
                            <h3 class="pagination-centered">MICA2 Mote</h3>
                            <h4 class="pagination-centered">UC Berkeley</h4>
                            <p>
                                <ul>
                                    <li>Controller: Atmel ATMega 128</li>
                                    <li>Radio Spectrum: ISM (Industrial, Scientific, Medical)</i>
                                    <li>RAM Capacity: 2kB </li>
                                    <li>Flash Memory: 128kB</li>
                                    <br>
                                    <li>Battery: 2 x AA batteries</li>
                                    <li>Size (mm): 58 x 32 x 7 (exc. battery)</li>
                                    <li>Weight (g): 18 (exc. battery)</li>
                                </ul>
                            </p>
                        </div>
                    </li>
                    <li class="span4">
                        <div class="thumbnail">
                            <img src="images/wsn/mica2dot.png">
                            <h3 class="pagination-centered">MICA2dot</h3>
                            <h4 class="pagination-centered">UC Berkeley</h4>
                            <p>
                                <ul>
                                    <li>Controller: Atmel ATMega 128</li>
                                    <li>Radio Spectrum: ISM (Industrial, Scientific, Medical)</i>
                                    <li>RAM Capacity: 2kB </li>
                                    <li>Flash Memory: 128kB</li>
                                    <br>
                                    <li>Battery: 3V button cell</li>
                                    <li>Size (mm): 25 x 6 (exc. battery)</li>
                                    <li>Weight (g): 3 (exc. battery) </li>
                                </ul>
                            </p>
                        </div>
                    </li>
                    <li class="span4">
                        <div class="thumbnail">
                            <img src="images/wsn/btnodesmall.png">
                            <h3 class="pagination-centered">BTNode rev3</h3>
                            <h4 class="pagination-centered">ETH Zurich</h4>
                            <p class="text-align: justified">
                                <ul>
                                    <li>Controller: Atmel ATMega 128</li>
                                    <li>Radio Spectrum: ISM (Industrial, Scientific, Medical) + Bluetooth</i>
                                    <li>RAM Capacity: 64kB +  180kB</li>
                                    <li>Flash Memory: 128kB ROM + 4kB EEPROM</li>
                                    <li>Battery: 2 x AA batteries</li>
                                    <li>Size (mm): 58.15 x 33 (excl. battery)</li>
                                    <li>Weight (g): not available</li>
                                </ul>
                            </p>
                        </div>
                    </li>
                </ul>
                Although the BTNode and the MICA2 Mote features the same microcontroller, power supply, and have a similar size, the BTNode offers a big RAM capacity (244 kB), much greater than the MICA2 Mote's one (2 kB).
                The MICA2dot, slightly bigger than a  £1 coin, shares the same memory capacity with the MICA2 Mote.
                <!-- However, its battery life remains limited by a 3 V coin cell, whilst the MICA2 offers 2 x AA batteries. -->
                </p>
                

